{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from 'react';\nexport const useCountdown = seconds => {\n  _s();\n\n  const [countdown, setCountdown] = useState(seconds);\n  const [isAlert, setIsAlert] = useState(false);\n  const [isDisabled, setIsDisabled] = useState(false);\n  const intervalRef = useRef();\n\n  const decreaseNum = () => {\n    setCountdown(prev => {\n      if (prev === 5) setIsAlert(true);\n\n      if (prev === 0) {\n        setIsDisabled(true);\n        setIsAlert(false);\n        clearInterval(intervalRef.current);\n        return prev;\n      }\n\n      return prev - 1;\n    });\n  };\n\n  useEffect(() => {\n    intervalRef.current = setInterval(decreaseNum, 1000);\n    return () => clearInterval(intervalRef.current);\n  }, []);\n  return {\n    countdown,\n    isAlert,\n    isDisabled\n  };\n};\n\n_s(useCountdown, \"YAKhgcuy+ocgY7e7r1vK+Y8mpWM=\");","map":{"version":3,"sources":["D:/db/Innovate/ejemplo/reactjs-hamburger-menu/src/components/useCountdown.js"],"names":["useEffect","useRef","useState","useCountdown","seconds","countdown","setCountdown","isAlert","setIsAlert","isDisabled","setIsDisabled","intervalRef","decreaseNum","prev","clearInterval","current","setInterval"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,OAAO,MAAMC,YAAY,GAAIC,OAAD,IAAa;AAAA;;AACvC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAACE,OAAD,CAA1C;AAEA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAMS,WAAW,GAAGV,MAAM,EAA1B;;AACA,QAAMW,WAAW,GAAG,MAAM;AACxBN,IAAAA,YAAY,CAAEO,IAAD,IAAU;AACrB,UAAIA,IAAI,KAAK,CAAb,EAAgBL,UAAU,CAAC,IAAD,CAAV;;AAEhB,UAAIK,IAAI,KAAK,CAAb,EAAgB;AACdH,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAF,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAM,QAAAA,aAAa,CAACH,WAAW,CAACI,OAAb,CAAb;AACA,eAAOF,IAAP;AACD;;AACD,aAAOA,IAAI,GAAG,CAAd;AACD,KAVW,CAAZ;AAWD,GAZD;;AAcAb,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,WAAW,CAACI,OAAZ,GAAsBC,WAAW,CAACJ,WAAD,EAAc,IAAd,CAAjC;AAEA,WAAO,MAAME,aAAa,CAACH,WAAW,CAACI,OAAb,CAA1B;AACD,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO;AAAEV,IAAAA,SAAF;AAAaE,IAAAA,OAAb;AAAsBE,IAAAA;AAAtB,GAAP;AACD,CA5BM;;GAAMN,Y","sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\n\r\nexport const useCountdown = (seconds) => {\r\n  const [countdown, setCountdown] = useState(seconds);\r\n\r\n  const [isAlert, setIsAlert] = useState(false);\r\n  const [isDisabled, setIsDisabled] = useState(false);\r\n\r\n  const intervalRef = useRef();\r\n  const decreaseNum = () => {\r\n    setCountdown((prev) => {\r\n      if (prev === 5) setIsAlert(true);\r\n\r\n      if (prev === 0) {\r\n        setIsDisabled(true);\r\n        setIsAlert(false);\r\n        clearInterval(intervalRef.current);\r\n        return prev;\r\n      }\r\n      return prev - 1;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    intervalRef.current = setInterval(decreaseNum, 1000);\r\n\r\n    return () => clearInterval(intervalRef.current);\r\n  }, []);\r\n\r\n  return { countdown, isAlert, isDisabled };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}